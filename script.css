// Smooth scrolling for service cards and navigation links
document.addEventListener('DOMContentLoaded', function() {
    // Get all service cards and contact form
    const serviceCards = document.querySelectorAll('.service-card');
    const contactForm = document.getElementById('contact-form');
    const serviceTypeSelect = document.getElementById('service-type');
    
    // Add click event listeners to all service cards
    serviceCards.forEach(card => {
        card.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Get the service type from data attribute
            const serviceType = this.getAttribute('data-service');
            
            // Add click animation
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = 'translateY(-10px)';
            }, 150);
            
            // Smooth scroll to contact form
            contactForm.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });
            
            // Pre-select the service type in the form
            setTimeout(() => {
                if (serviceTypeSelect && serviceType) {
                    serviceTypeSelect.value = serviceType;
                    serviceTypeSelect.focus();
                    
                    // Add a highlight effect
                    serviceTypeSelect.style.border = '2px solid #3b82f6';
                    serviceTypeSelect.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.1)';
                    
                    setTimeout(() => {
                        serviceTypeSelect.style.border = '';
                        serviceTypeSelect.style.boxShadow = '';
                    }, 1000);
                }
            }, 800);
        });
        
        // Add hover effects
        card.addEventListener('mouseenter', function() {
            this.style.boxShadow = '0 20px 40px -10px rgba(30, 58, 138, 0.2)';
        });
        
        card.addEventListener('mouseleave', function() {
            if (!this.style.transform.includes('scale')) {
                this.style.boxShadow = '';
            }
        });
    });
    
    // Smooth scrolling for all anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    // Navbar scroll effect
    const navbar = document.querySelector('.navbar');
    let lastScrollTop = 0;
    
    window.addEventListener('scroll', function() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        if (scrollTop > 100) {
            navbar.style.background = 'rgba(30, 58, 138, 0.95)';
            navbar.style.backdropFilter = 'blur(10px)';
        } else {
            navbar.style.background = 'rgba(255, 255, 255, 0.1)';
            navbar.style.backdropFilter = 'blur(10px)';
        }
        
        lastScrollTop = scrollTop;
    });
    
    // Parallax effect for hero background
    window.addEventListener('scroll', function() {
        const scrolled = window.pageYOffset;
        const heroSection = document.querySelector('.hero-section');
        const heroBackground = document.querySelector('.hero-background');
        const rate = scrolled * -0.5;
        
        if (heroSection && heroBackground && scrolled < heroSection.offsetHeight) {
            heroBackground.style.transform = `translateY(${rate}px)`;
        }
    });
    
    // Form validation and enhancement
    const form = document.querySelector('.contact-form');
    const inputs = form.querySelectorAll('input, select, textarea');
    
    // Add real-time validation
    inputs.forEach(input => {
        input.addEventListener('blur', function() {
            validateField(this);
        });
        
        input.addEventListener('input', function() {
            if (this.classList.contains('error')) {
                validateField(this);
            }
        });
    });
    
    function validateField(field) {
        const value = field.value.trim();
        let isValid = true;
        
        // Remove existing error styling
        field.classList.remove('error');
        field.style.borderColor = '';
        
        // Remove existing error messages
        const existingError = field.parentNode.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }
        
        // Validation rules
        if (field.hasAttribute('required') && !value) {
            isValid = false;
            showFieldError(field, 'This field is required.');
        } else if (field.type === 'email' && value && !isValidEmail(value)) {
            isValid = false;
            showFieldError(field, 'Please enter a valid email address.');
        } else if (field.type === 'tel' && value && !isValidPhone(value)) {
            isValid = false;
            showFieldError(field, 'Please enter a valid phone number.');
        }
        
        return isValid;
    }
    
    function showFieldError(field, message) {
        field.classList.add('error');
        field.style.borderColor = '#ef4444';
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = message;
        errorDiv.style.color = '#ef4444';
        errorDiv.style.fontSize = '0.9rem';
        errorDiv.style.marginTop = '5px';
        
        field.parentNode.appendChild(errorDiv);
    }
    
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    
    function isValidPhone(phone) {
        const phoneRegex = /^[\+]?[1-9]?[\d\s\-\(\)]{10,}$/;
        return phoneRegex.test(phone);
    }
    
    // Form submission handling for Formspree
    form.addEventListener('submit', function(e) {
        let allValid = true;
        
        // Validate all fields
        inputs.forEach(input => {
            if (!validateField(input)) {
                allValid = false;
            }
        });
        
        if (!allValid) {
            e.preventDefault();
            
            // Scroll to first error
            const firstError = form.querySelector('.error');
            if (firstError) {
                firstError.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
                firstError.focus();
            }
        } else {
            // Show loading state while Formspree processes the form
            const submitButton = form.querySelector('.submit-button');
            const originalText = submitButton.textContent;
            submitButton.textContent = 'Sending...';
            submitButton.disabled = true;
            
            // Add hidden field to specify recipient email for Formspree
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = '_replyto';
            hiddenInput.value = 'danilovdan7@gmail.com';
            form.appendChild(hiddenInput);
            
            // Reset button after a short delay (Formspree will handle the redirect)
            setTimeout(() => {
                submitButton.textContent = originalText;
                submitButton.disabled = false;
            }, 3000);
        }
    });
    
    // File upload preview functionality
    const fileInput = document.getElementById('images');
    if (fileInput) {
        fileInput.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            
            // Remove existing preview
            const existingPreview = document.querySelector('.file-preview');
            if (existingPreview) {
                existingPreview.remove();
            }
            
            if (files.length > 0) {
                const preview = document.createElement('div');
                preview.className = 'file-preview';
                preview.style.marginTop = '10px';
                preview.style.display = 'flex';
                preview.style.flexWrap = 'wrap';
                preview.style.gap = '10px';
                
                files.forEach((file, index) => {
                    if (file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.style.width = '80px';
                            img.style.height = '80px';
                            img.style.objectFit = 'cover';
                            img.style.borderRadius = '8px';
                            img.style.border = '2px solid #e2e8f0';
                            img.style.boxShadow = '0 2px 4px rgba(0, 0, 0, 0.1)';
                            preview.appendChild(img);
                        };
                        reader.readAsDataURL(file);
                    }
                });
                
                fileInput.parentNode.appendChild(preview);
            }
        });
    }
    
    // Intersection Observer for scroll animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    // Observe elements for scroll animations
    const animateElements = document.querySelectorAll('.service-card, .contact-item, .about-text');
    animateElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(30px)';
        el.style.transition = 'all 0.6s ease-out';
        observer.observe(el);
    });
    
    // Add smooth page loading animation
    document.body.style.opacity = '0';
    setTimeout(() => {
        document.body.style.opacity = '1';
        document.body.style.transition = 'opacity 0.5s ease-in';
    }, 100);
    
    // Mobile menu toggle (for smaller screens)
    const navBrand = document.querySelector('.nav-brand');
    const navLinks = document.querySelector('.nav-links');
    
    if (window.innerWidth <= 768) {
        navBrand.addEventListener('click', function() {
            navLinks.style.display = navLinks.style.display === 'flex' ? 'none' : 'flex';
        });
    }
    
    // Handle window resize
    window.addEventListener('resize', function() {
        if (window.innerWidth > 768) {
            navLinks.style.display = 'flex';
        } else {
            navLinks.style.display = 'none';
        }
    });
});

// Additional utility functions for enhanced UX
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Optimized scroll handler
const optimizedScrollHandler = debounce(function() {
    // Additional scroll-based animations can be added here
}, 10);

window.addEventListener('scroll', optimizedScrollHandler);